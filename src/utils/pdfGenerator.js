// PDF generation utilities using jsPDF
import { jsPDF } from 'jspdf';

export const generatePDF = (reportData, reportConfig) => {
  const { template, dateRange, includeCharts } = reportConfig;
  const doc = new jsPDF();
  
  // Set up document
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  let yPosition = margin;

  // Helper function to add text with word wrap
  const addText = (text, x, y, maxWidth, fontSize = 12) => {
    doc.setFontSize(fontSize);
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, x, y);
    return y + (lines.length * fontSize * 0.4);
  };

  // Header
  doc.setFontSize(20);
  doc.setFont(undefined, 'bold');
  doc.text('Finance AI Coach', margin, yPosition);
  yPosition += 15;

  doc.setFontSize(16);
  doc.text(template.title, margin, yPosition);
  yPosition += 10;

  doc.setFontSize(10);
  doc.setFont(undefined, 'normal');
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, margin, yPosition);
  doc.text(`Period: ${dateRange}`, pageWidth - margin - 50, yPosition);
  yPosition += 20;

  // Add a line separator
  doc.setLineWidth(0.5);
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 15;

  // Content based on template
  switch (template.id) {
    case 'monthly-summary':
      yPosition = addMonthlySummary(doc, reportData, yPosition, margin, pageWidth);
      break;
    case 'spending-analysis':
      yPosition = addSpendingAnalysis(doc, reportData, yPosition, margin, pageWidth);
      break;
    case 'budget-performance':
      yPosition = addBudgetPerformance(doc, reportData, yPosition, margin, pageWidth);
      break;
    case 'net-worth':
      yPosition = addNetWorthReport(doc, reportData, yPosition, margin, pageWidth);
      break;
    case 'goals-progress':
      yPosition = addGoalsProgress(doc, reportData, yPosition, margin, pageWidth);
      break;
    default:
      yPosition = addGenericReport(doc, reportData, yPosition, margin, pageWidth);
  }

  // Footer
  const footerY = pageHeight - 20;
  doc.setFontSize(8);
  doc.setFont(undefined, 'italic');
  doc.text('Generated by Finance AI Coach - Your Intelligent Financial Companion', margin, footerY);
  doc.text(`Page 1`, pageWidth - margin - 20, footerY);

  return doc;
};

const addMonthlySummary = (doc, data, yPos, margin, pageWidth) => {
  const { income, expenses, transactions } = data;
  
  doc.setFontSize(14);
  doc.setFont(undefined, 'bold');
  doc.text('FINANCIAL SUMMARY', margin, yPos);
  yPos += 15;

  doc.setFontSize(12);
  doc.setFont(undefined, 'normal');
  
  // Income section
  doc.setFont(undefined, 'bold');
  doc.text('Income Overview', margin, yPos);
  yPos += 8;
  doc.setFont(undefined, 'normal');
  doc.text(`Total Income: $${income.toLocaleString()}`, margin + 10, yPos);
  yPos += 6;
  doc.text(`Income Transactions: ${transactions.filter(t => t.type === 'income').length}`, margin + 10, yPos);
  yPos += 15;

  // Expenses section
  doc.setFont(undefined, 'bold');
  doc.text('Expense Overview', margin, yPos);
  yPos += 8;
  doc.setFont(undefined, 'normal');
  doc.text(`Total Expenses: $${expenses.toLocaleString()}`, margin + 10, yPos);
  yPos += 6;
  doc.text(`Expense Transactions: ${transactions.filter(t => t.type === 'expense').length}`, margin + 10, yPos);
  yPos += 15;

  // Net summary
  const netAmount = income - expenses;
  const savingsRate = income > 0 ? ((netAmount / income) * 100).toFixed(1) : 0;
  
  doc.setFont(undefined, 'bold');
  doc.text('Net Summary', margin, yPos);
  yPos += 8;
  doc.setFont(undefined, 'normal');
  doc.text(`Net Amount: $${netAmount.toLocaleString()}`, margin + 10, yPos);
  yPos += 6;
  doc.text(`Savings Rate: ${savingsRate}%`, margin + 10, yPos);
  yPos += 15;

  // Recent transactions
  if (transactions.length > 0) {
    doc.setFont(undefined, 'bold');
    doc.text('Recent Transactions', margin, yPos);
    yPos += 8;
    doc.setFont(undefined, 'normal');
    
    const recentTransactions = transactions.slice(0, 10);
    recentTransactions.forEach(transaction => {
      const line = `${transaction.date} | ${transaction.type.toUpperCase()} | ${transaction.category} | $${Math.abs(transaction.amount).toFixed(2)} | ${transaction.description}`;
      if (yPos > 250) { // Check if we need a new page
        doc.addPage();
        yPos = margin;
      }
      doc.text(line, margin + 10, yPos);
      yPos += 6;
    });
  }

  return yPos;
};

const addSpendingAnalysis = (doc, data, yPos, margin, pageWidth) => {
  const { categoryTotals, transactions } = data;
  
  doc.setFontSize(14);
  doc.setFont(undefined, 'bold');
  doc.text('SPENDING ANALYSIS', margin, yPos);
  yPos += 15;

  // Category breakdown
  doc.setFont(undefined, 'bold');
  doc.text('Category Breakdown', margin, yPos);
  yPos += 8;
  doc.setFont(undefined, 'normal');

  Object.entries(categoryTotals).forEach(([category, amount]) => {
    doc.text(`${category}: $${amount.toFixed(2)}`, margin + 10, yPos);
    yPos += 6;
  });

  yPos += 10;

  // Detailed transactions by category
  doc.setFont(undefined, 'bold');
  doc.text('Detailed Transactions by Category', margin, yPos);
  yPos += 8;

  Object.keys(categoryTotals).forEach(category => {
    const categoryTransactions = transactions.filter(t => t.type === 'expense' && t.category === category);
    if (categoryTransactions.length > 0) {
      doc.setFont(undefined, 'bold');
      doc.text(`${category.toUpperCase()}:`, margin, yPos);
      yPos += 6;
      doc.setFont(undefined, 'normal');
      
      categoryTransactions.forEach(t => {
        if (yPos > 250) {
          doc.addPage();
          yPos = margin;
        }
        doc.text(`  ${t.date} | $${Math.abs(t.amount).toFixed(2)} | ${t.description}`, margin + 10, yPos);
        yPos += 5;
      });
      yPos += 5;
    }
  });

  return yPos;
};

const addBudgetPerformance = (doc, data, yPos, margin, pageWidth) => {
  const { budgetUsage, budgets } = data;
  
  doc.setFontSize(14);
  doc.setFont(undefined, 'bold');
  doc.text('BUDGET PERFORMANCE', margin, yPos);
  yPos += 15;

  // Budget vs Actual
  doc.setFont(undefined, 'bold');
  doc.text('Budget vs Actual', margin, yPos);
  yPos += 8;
  doc.setFont(undefined, 'normal');

  Object.entries(budgetUsage).forEach(([category, usage]) => {
    const status = usage.isOverBudget ? 'OVER' : 'UNDER';
    const line = `${category}: Budgeted $${usage.budget.toFixed(2)} | Spent $${usage.spent.toFixed(2)} | ${status} by $${Math.abs(usage.remaining).toFixed(2)}`;
    doc.text(line, margin + 10, yPos);
    yPos += 6;
  });

  yPos += 10;

  // Summary
  const totalBudgeted = Object.values(budgets).reduce((sum, amount) => sum + amount, 0);
  const totalSpent = Object.values(budgetUsage).reduce((sum, usage) => sum + usage.spent, 0);
  const categoriesOverBudget = Object.values(budgetUsage).filter(usage => usage.isOverBudget).length;

  doc.setFont(undefined, 'bold');
  doc.text('Summary', margin, yPos);
  yPos += 8;
  doc.setFont(undefined, 'normal');
  doc.text(`Total Budgeted: $${totalBudgeted.toLocaleString()}`, margin + 10, yPos);
  yPos += 6;
  doc.text(`Total Spent: $${totalSpent.toLocaleString()}`, margin + 10, yPos);
  yPos += 6;
  doc.text(`Categories Over Budget: ${categoriesOverBudget}`, margin + 10, yPos);

  return yPos;
};

const addNetWorthReport = (doc, data, yPos, margin, pageWidth) => {
  const { netWorth, totalIncome, totalExpenses, transactions } = data;
  
  doc.setFontSize(14);
  doc.setFont(undefined, 'bold');
  doc.text('NET WORTH REPORT', margin, yPos);
  yPos += 15;

  doc.setFont(undefined, 'normal');
  doc.text(`Current Net Worth: $${netWorth.toLocaleString()}`, margin, yPos);
  yPos += 8;
  doc.text(`Total Income: $${totalIncome.toLocaleString()}`, margin, yPos);
  yPos += 6;
  doc.text(`Total Expenses: $${totalExpenses.toLocaleString()}`, margin, yPos);
  yPos += 6;
  doc.text(`Based on ${transactions.length} transactions`, margin, yPos);

  return yPos;
};

const addGoalsProgress = (doc, data, yPos, margin, pageWidth) => {
  const { goals } = data;
  
  doc.setFontSize(14);
  doc.setFont(undefined, 'bold');
  doc.text('FINANCIAL GOALS PROGRESS', margin, yPos);
  yPos += 15;

  if (goals.length === 0) {
    doc.setFont(undefined, 'normal');
    doc.text('No financial goals set.', margin, yPos);
    return yPos + 10;
  }

  goals.forEach(goal => {
    const progress = goal.target_amount > 0 ? (goal.current_amount / goal.target_amount) * 100 : 0;
    
    doc.setFont(undefined, 'bold');
    doc.text(goal.title, margin, yPos);
    yPos += 6;
    doc.setFont(undefined, 'normal');
    doc.text(`Target: $${goal.target_amount.toLocaleString()}`, margin + 10, yPos);
    yPos += 5;
    doc.text(`Current: $${goal.current_amount.toLocaleString()}`, margin + 10, yPos);
    yPos += 5;
    doc.text(`Progress: ${progress.toFixed(1)}%`, margin + 10, yPos);
    yPos += 5;
    doc.text(`Deadline: ${new Date(goal.deadline).toLocaleDateString()}`, margin + 10, yPos);
    yPos += 5;
    doc.text(`Category: ${goal.category}`, margin + 10, yPos);
    yPos += 10;
  });

  return yPos;
};

const addGenericReport = (doc, data, yPos, margin, pageWidth) => {
  doc.setFontSize(14);
  doc.setFont(undefined, 'bold');
  doc.text('FINANCIAL REPORT', margin, yPos);
  yPos += 15;

  doc.setFont(undefined, 'normal');
  doc.text('This report contains your financial data for the selected period.', margin, yPos);
  yPos += 8;
  doc.text(`Total Transactions: ${data.transactions?.length || 0}`, margin, yPos);
  yPos += 6;
  doc.text(`Income Transactions: ${data.transactions?.filter(t => t.type === 'income').length || 0}`, margin, yPos);
  yPos += 6;
  doc.text(`Expense Transactions: ${data.transactions?.filter(t => t.type === 'expense').length || 0}`, margin, yPos);

  return yPos;
};

export const downloadPDF = (doc, filename) => {
  doc.save(filename);
};